# Copyright (c) 2021 MindStand Technologies, Inc
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

name: Go
on: [push, pull_request]
jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v1
    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
    - name: Setup gogmcli test
      run: |
        export ROOTDIR=`pwd`
        rm testing_/linking.go
        cd cmd/gogmcli
        go build .
        mv gogmcli $ROOTDIR/testing_/gogmcli
        cd $ROOTDIR/testing_
        ./gogmcli gen .
        cd $ROOTDIR
    - name: Build
      run: go build -v .
    - name: Run Unit Tests
      run: go test ./... -cover -short

#    - name: Start Neo4j V3 Docker
#      run: |
#        docker-compose -f .github/docker-compose-v3.yaml up -d
#    - name: Wait for neo4j v3 to be ready
#      run: |
#        sleep 45
#    - name: Run Integration Test on V3
#      run: go test ./... -cover -run Integration
#    - name: Stop Neo4j Docker on v3
#      run: |
#        docker-compose -f .github/docker-compose-v3.yaml down --remove-orphans

    - name: Start Neo4j V4 Docker
      run: |
        docker-compose -f .github/docker-compose-v4.yaml up -d
    - name: Wait for neo4j v4 to be ready
      run: |
        sleep 45
    - name: Run Integration Test on V4
      run: go test ./... -cover -run Integration
    - name: Stop Neo4j Docker on v4
      run: |
        docker-compose -f .github/docker-compose-v4.yaml down --remove-orphans
